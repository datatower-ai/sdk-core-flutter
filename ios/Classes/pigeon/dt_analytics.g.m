// Autogenerated from Pigeon (v18.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "dt_analytics.g.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}

static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

NSObject<FlutterMessageCodec> *DTDTAnalyticsPigeonGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  sSharedObject = [FlutterStandardMessageCodec sharedInstance];
  return sSharedObject;
}

void SetUpDTDTAnalyticsPigeon(id<FlutterBinaryMessenger> binaryMessenger, NSObject<DTDTAnalyticsPigeon> *api) {
  SetUpDTDTAnalyticsPigeonWithSuffix(binaryMessenger, api, @"");
}

void SetUpDTDTAnalyticsPigeonWithSuffix(id<FlutterBinaryMessenger> binaryMessenger, NSObject<DTDTAnalyticsPigeon> *api, NSString *messageChannelSuffix) {
  messageChannelSuffix = messageChannelSuffix.length > 0 ? [NSString stringWithFormat: @".%@", messageChannelSuffix] : @"";
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.datatower_ai_core.DTAnalyticsPigeon.trackEvent", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:DTDTAnalyticsPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(trackEventEventName:properties:error:)], @"DTDTAnalyticsPigeon api (%@) doesn't respond to @selector(trackEventEventName:properties:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_eventName = GetNullableObjectAtIndex(args, 0);
        NSDictionary<NSString *, id> *arg_properties = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api trackEventEventName:arg_eventName properties:arg_properties error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.datatower_ai_core.DTAnalyticsPigeon.userSet", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:DTDTAnalyticsPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(userSetProperties:error:)], @"DTDTAnalyticsPigeon api (%@) doesn't respond to @selector(userSetProperties:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSDictionary<NSString *, id> *arg_properties = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api userSetProperties:arg_properties error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.datatower_ai_core.DTAnalyticsPigeon.userSetOnce", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:DTDTAnalyticsPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(userSetOnceProperties:error:)], @"DTDTAnalyticsPigeon api (%@) doesn't respond to @selector(userSetOnceProperties:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSDictionary<NSString *, id> *arg_properties = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api userSetOnceProperties:arg_properties error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.datatower_ai_core.DTAnalyticsPigeon.userAdd", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:DTDTAnalyticsPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(userAddProperties:error:)], @"DTDTAnalyticsPigeon api (%@) doesn't respond to @selector(userAddProperties:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSDictionary<NSString *, id> *arg_properties = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api userAddProperties:arg_properties error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.datatower_ai_core.DTAnalyticsPigeon.userUnset", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:DTDTAnalyticsPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(userUnsetProperties:error:)], @"DTDTAnalyticsPigeon api (%@) doesn't respond to @selector(userUnsetProperties:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSArray<NSString *> *arg_properties = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api userUnsetProperties:arg_properties error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.datatower_ai_core.DTAnalyticsPigeon.userDelete", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:DTDTAnalyticsPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(userDeleteWithError:)], @"DTDTAnalyticsPigeon api (%@) doesn't respond to @selector(userDeleteWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api userDeleteWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.datatower_ai_core.DTAnalyticsPigeon.userAppend", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:DTDTAnalyticsPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(userAppendProperties:error:)], @"DTDTAnalyticsPigeon api (%@) doesn't respond to @selector(userAppendProperties:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSDictionary<NSString *, id> *arg_properties = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api userAppendProperties:arg_properties error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.datatower_ai_core.DTAnalyticsPigeon.userUniqAppend", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:DTDTAnalyticsPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(userUniqAppendProperties:error:)], @"DTDTAnalyticsPigeon api (%@) doesn't respond to @selector(userUniqAppendProperties:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSDictionary<NSString *, id> *arg_properties = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api userUniqAppendProperties:arg_properties error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.datatower_ai_core.DTAnalyticsPigeon.getDataTowerId", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:DTDTAnalyticsPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getDataTowerIdWithCompletion:)], @"DTDTAnalyticsPigeon api (%@) doesn't respond to @selector(getDataTowerIdWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api getDataTowerIdWithCompletion:^(NSString *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.datatower_ai_core.DTAnalyticsPigeon.setAccountId", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:DTDTAnalyticsPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setAccountIdId:error:)], @"DTDTAnalyticsPigeon api (%@) doesn't respond to @selector(setAccountIdId:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_id = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setAccountIdId:arg_id error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.datatower_ai_core.DTAnalyticsPigeon.setFirebaseAppInstanceId", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:DTDTAnalyticsPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setFirebaseAppInstanceIdId:error:)], @"DTDTAnalyticsPigeon api (%@) doesn't respond to @selector(setFirebaseAppInstanceIdId:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_id = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setFirebaseAppInstanceIdId:arg_id error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.datatower_ai_core.DTAnalyticsPigeon.setAppsFlyerId", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:DTDTAnalyticsPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setAppsFlyerIdId:error:)], @"DTDTAnalyticsPigeon api (%@) doesn't respond to @selector(setAppsFlyerIdId:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_id = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setAppsFlyerIdId:arg_id error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.datatower_ai_core.DTAnalyticsPigeon.setKochavaId", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:DTDTAnalyticsPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setKochavaIdId:error:)], @"DTDTAnalyticsPigeon api (%@) doesn't respond to @selector(setKochavaIdId:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_id = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setKochavaIdId:arg_id error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.datatower_ai_core.DTAnalyticsPigeon.setAdjustId", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:DTDTAnalyticsPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setAdjustIdId:error:)], @"DTDTAnalyticsPigeon api (%@) doesn't respond to @selector(setAdjustIdId:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_id = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setAdjustIdId:arg_id error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.datatower_ai_core.DTAnalyticsPigeon.enableThirdPartySharing", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:DTDTAnalyticsPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(enableThirdPartySharingType:error:)], @"DTDTAnalyticsPigeon api (%@) doesn't respond to @selector(enableThirdPartySharingType:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSInteger arg_type = [GetNullableObjectAtIndex(args, 0) integerValue];
        FlutterError *error;
        [api enableThirdPartySharingType:arg_type error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.datatower_ai_core.DTAnalyticsPigeon.setStaticCommonProperties", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:DTDTAnalyticsPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setStaticCommonPropertiesProperties:error:)], @"DTDTAnalyticsPigeon api (%@) doesn't respond to @selector(setStaticCommonPropertiesProperties:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSDictionary<NSString *, id> *arg_properties = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setStaticCommonPropertiesProperties:arg_properties error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.datatower_ai_core.DTAnalyticsPigeon.clearStaticCommonProperties", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:DTDTAnalyticsPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(clearStaticCommonPropertiesWithError:)], @"DTDTAnalyticsPigeon api (%@) doesn't respond to @selector(clearStaticCommonPropertiesWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api clearStaticCommonPropertiesWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
