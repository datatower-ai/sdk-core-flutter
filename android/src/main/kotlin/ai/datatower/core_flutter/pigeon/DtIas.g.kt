// Autogenerated from Pigeon (v18.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")


import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  return if (exception is DtIasFlutterError) {
    listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class DtIasFlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface DTIasPigeon {
  fun reportSubscribeSuccessAndroid(originalOrderId: String, orderId: String, sku: String, price: Double, currency: String, properties: Map<String, Any>)
  fun reportSubscribeSuccessIos(seq: String, placement: String, sku: String, orderId: String, originalOrderId: String, price: String, currency: String, entrance: String)

  companion object {
    /** The codec used by DTIasPigeon. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
    /** Sets up an instance of `DTIasPigeon` to handle messages through the `binaryMessenger`. */
    fun setUp(binaryMessenger: BinaryMessenger, api: DTIasPigeon?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.datatower_ai_core.DTIasPigeon.reportSubscribeSuccessAndroid$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val originalOrderIdArg = args[0] as String
            val orderIdArg = args[1] as String
            val skuArg = args[2] as String
            val priceArg = args[3] as Double
            val currencyArg = args[4] as String
            val propertiesArg = args[5] as Map<String, Any>
            val wrapped: List<Any?> = try {
              api.reportSubscribeSuccessAndroid(originalOrderIdArg, orderIdArg, skuArg, priceArg, currencyArg, propertiesArg)
              listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.datatower_ai_core.DTIasPigeon.reportSubscribeSuccessIos$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val seqArg = args[0] as String
            val placementArg = args[1] as String
            val skuArg = args[2] as String
            val orderIdArg = args[3] as String
            val originalOrderIdArg = args[4] as String
            val priceArg = args[5] as String
            val currencyArg = args[6] as String
            val entranceArg = args[7] as String
            val wrapped: List<Any?> = try {
              api.reportSubscribeSuccessIos(seqArg, placementArg, skuArg, orderIdArg, originalOrderIdArg, priceArg, currencyArg, entranceArg)
              listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
